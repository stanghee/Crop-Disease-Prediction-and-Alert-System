version: "3.9"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
    mem_limit: 512m
    mem_reservation: 256m

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms256m"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 3
    mem_limit: 1g
    mem_reservation: 512m

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    mem_limit: 512m
    mem_reservation: 256m

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: weatherdb,sensordb
      POSTGRES_HOST_AUTH_METHOD: md5
      PGDATA: /var/lib/postgresql/data/pgdata
      TZ: Europe/Rome
      PGTZ: Europe/Rome
    command: ["postgres", "-c", "timezone=Europe/Rome"]
    volumes:
      - ./init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    mem_limit: 1g
    mem_reservation: 512m
    shm_size: 256m

  weather-producer:
    build: ./producer/Weather
    volumes:
      - ./producer/Weather/producer.py:/app/producer.py
      - ./producer/Weather/entrypoint.sh:/app/entrypoint.sh
    working_dir: /app
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - API_KEY=${WEATHER_API_KEY}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - TIMEZONE=Europe/Rome
      - DEFAULT_LOCATION=${DEFAULT_LOCATION}
    restart: unless-stopped
    mem_limit: 256m
    mem_reservation: 128m

  weather-consumer:
    build: ./consumer/Weather
    volumes:
      - ./consumer/Weather/consumer.py:/app/consumer.py
      - ./consumer/Weather/entrypoint.sh:/app/entrypoint.sh
    working_dir: /app
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_HOST: postgres
      POSTGRES_DB: weatherdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      TIMEZONE: Europe/Rome
    restart: unless-stopped
    mem_limit: 256m
    mem_reservation: 128m

  sensor-producer:
    build: ./producer/Sensor
    volumes:
      - ./producer/Sensor/entrypoint.sh:/app/entrypoint.sh
    working_dir: /app
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - TIMEZONE=Europe/Rome
      - ANOMALY_PROBABILITY=0.3
    restart: unless-stopped
    mem_limit: 256m
    mem_reservation: 128m

  sensor-consumer:
    build: ./consumer/Sensor
    volumes:
      - ./consumer/Sensor/consumer.py:/app/consumer.py
      - ./consumer/Sensor/entrypoint.sh:/app/entrypoint.sh
    working_dir: /app
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_HOST: postgres
      POSTGRES_DB: sensordb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    restart: unless-stopped
    mem_limit: 256m
    mem_reservation: 128m

  satellite-producer:
    build: ./producer/Satellite
    volumes:
      - ./producer/Satellite/producer.py:/app/producer.py
      - ./producer/Satellite/entrypoint.sh:/app/entrypoint.sh
    working_dir: /app
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_HOST: minio
      MINIO_PORT: 9000
      COPERNICUS_CLIENT_ID: ${COPERNICUS_CLIENT_ID}
      COPERNICUS_CLIENT_SECRET: ${COPERNICUS_CLIENT_SECRET}
      # Configurazione area geografica (default: Verona)
      BBOX_MIN_LON: ${BBOX_MIN_LON:-10.894444}
      BBOX_MIN_LAT: ${BBOX_MIN_LAT:-45.266667}
      BBOX_MAX_LON: ${BBOX_MAX_LON:-10.909444}
      BBOX_MAX_LAT: ${BBOX_MAX_LAT:-45.281667}
    restart: unless-stopped
    mem_limit: 512m
    mem_reservation: 256m

  satellite-consumer:
    build: ./consumer/Satellite
    volumes:
      - ./consumer/Satellite/consumer.py:/app/consumer.py
      - ./consumer/Satellite/entrypoint.sh:/app/entrypoint.sh
    working_dir: /app
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: satellite-images
    restart: unless-stopped
    mem_limit: 512m
    mem_reservation: 256m

  flink-ml-service:
    build: ./flink_ml_service
    volumes:
      - ./flink_ml_service:/app
      - flink_models:/app/models
      - flink_checkpoints:/app/flink-checkpoints
    working_dir: /app
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      sensor-consumer:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_HOST: postgres
      POSTGRES_DB: sensordb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      TIMEZONE: Europe/Rome
      FLINK_PARALLELISM: 4
      FLINK_CHECKPOINTS_INTERVAL: 60000
    ports:
      - "8081:8081"  # Flink Web UI
    command: ["python", "flink_service.py"]
    restart: unless-stopped
    mem_limit: 2g
    mem_reservation: 1g

volumes:
  postgres_data:
  minio_data:
  flink_models:
  flink_checkpoints: