services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
    mem_limit: 512m
    mem_reservation: 256m

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms256m"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 3
    mem_limit: 1g
    mem_reservation: 512m

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    mem_limit: 512m
    mem_reservation: 256m

  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: crop_disease_ml
      POSTGRES_USER: ml_user
      POSTGRES_PASSWORD: ml_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/ml-service/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ml_user -d crop_disease_ml"]
      interval: 30s
      timeout: 10s
      retries: 3
    mem_limit: 1g
    mem_reservation: 512m


  weather-producer:
    build: ./services/weather-service/producer
    volumes:
      - ./services/weather-service/producer/producer.py:/app/producer.py
      - ./services/weather-service/producer/entrypoint.sh:/app/entrypoint.sh
    working_dir: /app
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - API_KEY=${WEATHER_API_KEY}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - TIMEZONE=Europe/Rome
      - DEFAULT_LOCATION=${DEFAULT_LOCATION}
    restart: unless-stopped
    mem_limit: 256m
    mem_reservation: 128m



  sensor-producer:
    build: ./services/sensor-service/producer
    volumes:
      - ./services/sensor-service/producer/entrypoint.sh:/app/entrypoint.sh
    working_dir: /app
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - TIMEZONE=Europe/Rome
      - ANOMALY_PROBABILITY=${ANOMALY_PROBABILITY}
    restart: unless-stopped
    mem_limit: 256m
    mem_reservation: 128m



  satellite-producer:
    build: ./services/satellite-service/producer
    volumes:
      - ./services/satellite-service/producer/producer.py:/app/producer.py
      - ./services/satellite-service/producer/entrypoint.sh:/app/entrypoint.sh
    working_dir: /app
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_HOST: minio
      MINIO_PORT: 9000
      COPERNICUS_CLIENT_ID: ${COPERNICUS_CLIENT_ID}
      COPERNICUS_CLIENT_SECRET: ${COPERNICUS_CLIENT_SECRET}
      # Configurazione area geografica (default: Verona) 
      # TODO: change with env variables
      BBOX_MIN_LON: ${BBOX_MIN_LON:-10.894444}
      BBOX_MIN_LAT: ${BBOX_MIN_LAT:-45.266667}
      BBOX_MAX_LON: ${BBOX_MAX_LON:-10.909444}
      BBOX_MAX_LAT: ${BBOX_MAX_LAT:-45.281667}
    restart: unless-stopped
    mem_limit: 512m
    mem_reservation: 256m



  spark-data-lake-service:
    build: ./services/spark-service
    volumes:
      - ./services/spark-service:/app
      - spark_checkpoints:/app/spark-checkpoints
    working_dir: /app
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      TIMEZONE: Europe/Rome
      SPARK_PARALLELISM: 4
      # Data lake paths (override default s3a URIs used in code)
      BRONZE_PATH: s3a://bronze/
      SILVER_PATH: s3a://silver/
    ports:
      - "4040:4040"  # Spark UI
    command: ["python", "main_service.py"]
    restart: unless-stopped
    mem_limit: 3g
    mem_reservation: 2g



volumes:
  minio_data:
  spark_checkpoints:
  postgres_data: